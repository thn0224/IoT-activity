- Think of other systems you have around you that read data from a sensor and use that to make decisions. One example would be the thermostat on an oven. Can you find more? 
--> Automatic Streetlights:  – light sensors (photocells) to detect ambient light levels
                             - when it gets dark, they turn on automatically, and when daylight returns, they turn off
--> Car Parking Sensors:  – many modern cars use ultrasonic sensors to detect obstacles when parking
                          - if an object is too close, the system warns the driver with beeps or even applies automatic braking
--> Motion-Activated Lights: – use motion sensors (like PIR sensors) to detect movement and turn on the lights when someone walks by
                             - they turn off after a certain period of inactivity
--> Autonomous Vacuum Cleaners: – use infrared or LiDAR sensors to map a room, detect obstacles, and decide where to clean next

- What other data could help make an Internet connected thermostat smarter?
--> Smart Window Sensors: window open, the thermostat could detect it and avoid heating or cooling that room unnecessarily
--> Humidity Levels: help adjust heating/cooling for better comfort; for example:air is very dry in winter, the system could suggest using a humidifier
--> Geolocation (GPS from Phone): thermostat could detect when you're on your way home and start warming or cooling your house before you arrive
--> Voice Commands & AI Integration: integrated with voice assistants like Alexa or Google Assistant, users could fine-tune temperatures with simple commands or let AI optimize settings over time
--> Energy Prices: adjust heating and cooling based on real-time electricity prices, reducing usage when prices are high and increasing efficiency

- Think of other scenarios where privacy is important so processing of data would be better done on the edge rather than in the cloud. As a hint - think about IoT devices with cameras or other imaging devices on them.
--> Smart Baby Monitors: cameras and audio monitors in nurseries can analyze movement and crying locally, ensuring that sensitive footage of infants isn't stored in the cloud
--> Smartphones with AI Features: many modern smartphones process images locally (e.g., on-device facial recognition like Apple’s Face ID) to enhance privacy rather than sending biometric data to the cloud
--> Home Security Cameras: smart cameras can analyze footage locally for motion detection or facial recognition rather than uploading everything to the cloud, reducing privacy risks and avoiding unnecessary data exposure
--> Industrial IoT in Factories: machines with cameras monitoring production lines can process footage on-site to detect defects or safety issues without sending trade-sensitive images or proprietary manufacturing data to the cloud

- An average PC or Mac has a CPU with multiple cores running at multiple GigaHertz, meaning the clock ticks billions of times a second. Research the clock speed of your computer and compare how many times faster it is than the Wio terminal.
--> Wio Terminal has a Microchip ATSAMD51 clock speed: 120 MHz (120 million times/ s)
--> MacBook M1: 3.2 GHz (3,200 MHz)
--> Comparision: 3200 MHz/ 120 MHz = 26,67 --> 26,7 times faster than WiO-Terminal

- Do a little research: How much RAM and storage does the computer you are using to read this have? How does this compare to a microcontroller?
--> MacBook 14 Pro: 16 GB RAM (unified memory) and 512 GB (SSD) storage
--> Arduino Uno: 2 KB of SRAM and 32 KB storage
--> ESP8266: 80 KB of user-data RAM and 4 MB storage
--> MacBook Pro's RAM is approximately 8,000 times larger than Arduino Uno's SRAM and storage capacity is about 16 million times greater

- What programming languages are you familiar with? Are they supported on Linux?
--> Java, HTML, CSS, JavaScript, PHP; all are supported on Linux

The challenge in the last lesson was to list as many IoT devices as you can that are in your home, school or workplace. For every device in this list, do you think they are built around microcontrollers or single-board computers, or even a mixture of both?
--> At Home:
- Smartphones & Smartwatches – SBC
- Smart Speakers (Alexa, Google Home, Apple HomePod) – SBC
- Smart TVs & Streaming Devices (Chromecast, Apple TV, Fire Stick) – SBC
- Smart Plugs & Bulbs (Philips Hue, TP-Link, Xiaomi Smart Bulbs) – MCU
- Smart Thermostats – MCU
- Smart Door Locks – MCU
- WiFi Routers & Mesh Networks – SBC
- Security Cameras (Ring, Arlo, Xiaomi, Hikvision, etc.) – Mix
- Robot Vacuums (Roomba, Xiaomi, Dreame, etc.) - Mix
--> At VGU:
- Smart Projectors & Interactive Whiteboards – SBC
- Security Cameras & Motion Sensors – Mix
- Access Control Systems (RFID Student Cards, Fingerprint Scanners) – MCU
- Environmental Sensors – MCU
- Smart Lighting & Energy Management Systems – MCU
- Lab Equipment with IoT Integration – Mix

This lesson covered microcontrollers and single-board computers. Create a table comparing and contrasting them, and note at least 2 reasons why you would use a microcontroller over a single-board computer, and at least 2 reasons why you would use a single-board computer over a microcontroller.

Comparison of Microcontrollers and Single-Board Computers: 

| Feature           | Microcontrollers (MCUs)                                                            | Single-Board Computers (SBCs)                                                    |
|-------------------|------------------------------------------------------------------------------------|----------------------------------------------------------------------------------|
| Definition        | A small, low-power computer on a single chip with CPU, RAM, and storage integrated | A complete computer on a single board with CPU, RAM, storage, and I/O interfaces |
| Operating System  | No OS (bare-metal) or lightweight RTOS                                             | Runs full OS (Linux, Windows IoT, etc.)                                          |
| Processing Power  | Low power (typically <500 MHz)                                                     | High power (1 GHz+ multi-core CPUs)                                              |
| Memory (RAM)      | Limited (usually in KB or MB)                                                      | Higher (512MB to several GB)                                                     |
| Storage           | Flash memory (KB to MB)                                                            | Uses SD card, eMMC, or SSD (GB to TB)                                            |
| Power Consumption | Very low (can run on batteries for years)                                          | Higher (requires external power supply)                                          |
| Connectivity      | Often lacks built-in networking, may use external modules                          | Built-in WiFi, Bluetooth, Ethernet, USB                                          |
| Use Case          | Simple, real-time control tasks (e.g., turning on LEDs, reading sensors)           | Complex applications like AI, multimedia, and general computing                  |
| Examples          | Arduino, ESP32, STM32, ATmega328                                                   | Raspberry Pi, Jetson Nano, BeagleBone                                            |

Reasons to Use a Microcontroller (MCU):
1. Ultra-low power consumption – Can run on small batteries for months or years 
2. Real-time performance – Better for time-sensitive tasks like motor control or sensor monitoring
3. Lower cost – Typically cheaper than SBCs, making them ideal for simple applications
4. Instant startup – No need to boot an OS; executes code immediately when powered

Reasons to Use a Single-Board Computer (SBC):  
1. More computing power – Suitable for AI, image processing, and multitasking applications 
2. Runs a full OS – Can execute multiple processes, connect to networks, and use software like Python or databases
3. Better connectivity – Has built-in WiFi, Bluetooth, Ethernet, and USB support
4. Easier software development – Supports high-level programming languages and development tools
