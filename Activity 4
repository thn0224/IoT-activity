Do some research. If you have a lot of IoT devices, how can you ensure your MQTT broker can handle all the messages?
--> Scalability: 
- Use a Clustered MQTT Broker: Solutions like Eclipse Mosquitto, EMQX, HiveMQ, or VerneMQ support clustering, distributing the load across multiple brokers
- Deploy Load Balancers: Use HAProxy, Nginx, or cloud-based load balancers to distribute client connections across multiple MQTT brokers
--> Performance Optimization:
- Optimize QoS Levels: QoS 0 (fire-and-forget) for non-critical messages, QoS 1 or 2 only when reliability is crucial to reduce message overhead
- Retain Messages Efficiently: Store only essential retained messages to avoid memory overload
--> Resource Management:
- Increase Hardware Resources: More CPU, RAM, and disk space improves broker performance
- Use Persistent Storage: Store messages efficiently in databases like InfluxDB, TimescaleDB, or MongoDB to handle large volumes of messages
--> Network Optimization:
- Use WebSockets & MQTT over TCP/IP Efficiently: If many devices connect, optimize keep-alive intervals to reduce unnecessary reconnections
- Enable Session Persistence: Reduce re-authentication overhead by keeping persistent session IDs for frequently connecting devices
--> Security & Access Control:
- Use Authentication & Authorization: Implement TLS encryption, client certificates, or token-based authentication (OAuth, JWT) to ensure secure communication
- Limit Client Connection Rates: Prevent DDoS attacks or excessive message flooding by setting rate limits on message publishing
--> Monitoring & Analytics:
- Monitor Broker Metrics: Use Prometheus, Grafana, or MQTT Explorer to track CPU load, memory usage, message throughput, and connection counts
- Enable Logging & Alerts: Set up logging and alerts for unexpected failures, high latencies, or overload conditions

What other situations would require data from multiple sensors to be evaluated before sending commands?
-> Traffic Management Systems
- Sensors Used: Traffic cameras, inductive loop sensors, GPS trackers, and weather sensors
- Why Multiple Sensors? Instead of changing traffic lights based on one sensor, the system could use data from multiple intersections to adjust signal timing dynamically and reduce congestion
--> Flood Monitoring Systems
- Sensors Used: Water level sensors, rainfall sensors, humidity sensors, flow rate sensors
- Why Multiple Sensors? Instead of triggering alarms based on a single water level sensor, the system should combine readings from nearby areas to predict flood risks more accurately
--> Self-Driving Cars
- Sensors Used: LiDAR, cameras, ultrasonic sensors, GPS, radar
- Why Multiple Sensors? A single camera might be obstructed, but a combination of sensors ensures safe navigation by cross-verifying obstacles, lane positions, and distances
--> Security & Intrusion Detection
- Sensors Used: Motion detectors, cameras, pressure sensors, glass-break sensors
- Why Multiple Sensors? A motion sensor alone might trigger false alarms (e.g., from pets), but if multiple sensors detect movement in a restricted area, it can confirm an intrusion

What situations might require an assured delivery message over a fire and forget message?
Situations Requiring Assured Delivery (QoS 1 or QoS 2 in MQTT):
--> Emergency Alert Systems:
- Example: Fire alarms or medical emergency notifications
- Why Assured Delivery? Missing an alert could delay response times and put lives at risk
--> Fleet & Logistics Tracking
- Example: Tracking cargo shipments or delivery routes
- Why Assured Delivery? Losing GPS updates could result in misplaced deliveries or inefficiencies

Situations Suitable for Fire-and-Forget Messaging (QoS 0 in MQTT):
--> Social Media Notifications
- Example: Sending a "new message" push notification
- Why Fire-and-Forget? Users frequently check their apps, so a lost notification isn't critical
--> Smart Lighting Systems
- Example: Sending "Turn on" or "Turn off" commands to home lights
- Why Fire-and-Forget? If a message is lost, the next command can still correct the state

Do some research: What happens to MQTT messages if there is no listener?
--> QoS 0 (At most once – "Fire and Forget"): Messages are lost if there is no active subscriber at the time of publishing
- The broker does not store the message
- If a client subscribes after the message was sent, it won’t receive the message
- Example: Live sensor readings like temperature updates that are sent every second
--> QoS 1 (At least once – "Acknowledged Delivery"): The broker stores the message until at least one subscriber acknowledges it
- If no subscriber is present, the broker keeps the message until a subscriber connects and acknowledges receipt
- Once a subscriber confirms, the broker deletes the message
- Example: Smart home command (turning on a light) — you want the command to be received even if there was a slight network delay
--> QoS 2 (Exactly once – "Guaranteed Delivery"): The broker ensures the message is delivered exactly once, even if no subscriber is currently connected
- It goes through a two-step handshake to guarantee delivery without duplication
- If no subscriber is present, the broker queues the message and delivers it when one connects
- Example: Bank transaction confirmation — you want the message to arrive exactly once to prevent duplicate payments
--> Retained Messages: If a message is marked as retained, the broker stores it even if no subscriber is currently listening
- When a new subscriber joins, it immediately gets the last retained message
- Example: Weather update topics – If a device subscribes, it should get the latest known weather condition instead of waiting for the next update
--> Persistent Sessions & Offline Subscribers: 
- If a subscriber disconnects but has a persistent session enabled, the broker stores messages for that client
- When the subscriber reconnects, it receives all stored messages
- If a subscriber has no persistent session, any messages sent while they were offline are lost

How could the device or server code ensure commands are always sent and handled in order over MQTT if needed?
--> Use QoS 2 (Exactly Once Delivery):
- MQTT Quality of Service (QoS) 2 ensures each message is delivered once and in the correct order
- It prevents duplicates and ensures that commands don't get lost due to network issues
- Example: If you send "Open door", followed by "Close door", the door will not accidentally stay open due to a lost message
- How? The publisher marks messages with QoS 2. The MQTT broker and subscriber go through a 4-step handshake to guarantee correct order and no duplicates.
--> Use a Single MQTT Topic for Ordered Messages:
- If multiple devices subscribe to different topics, messages may not always be received in order
- Instead, use a single topic for a sequence of commands
- How? The subscriber processes commands in order of timestamp
--> Enable Persistent Sessions for Offline Subscribers
- If the device disconnects, messages sent during that time may be lost
- MQTT supports persistent sessions, which store messages for offline devices
- When the device reconnects, it retrieves the missed messages in the correct order
- How? Set Clean Session = False when subscribing. The broker stores messages and delivers them once the device reconnects.
--> Use Message Queuing (FIFO Processing)
- The subscriber can use a queue (First In, First Out - FIFO) to process commands one by one
- This prevents executing commands out of order if multiple messages arrive at the same time
he device processes Step 1 before Step 2, even if they arrive at the same time.
- How? Store incoming messages in a queue based on timestamp or sequence ID. Process messages sequentially.
--> Use Retained Messages for Latest Command State
- If a device disconnects and reconnects, it may miss the last sent command
- Retained messages store the last command and send it to new subscribers
- How? Publish messages with retained = true. New subscribers get the latest retained command.

Assignements:
Comparison of MQTT and AMQP

| Feature             | MQTT                                                     | AMQP                                            |
|---------------------|----------------------------------------------------------|-------------------------------------------------|
| Power Usage         | Low – optimized for IoT and embedded devices             | Higher – requires more resources                |
| Security            | Supports TLS, authentication, but simpler security model | Advanced security with role-based access        |
| Message Persistence | Supports QoS levels ensuring message delivery            | Reliable with acknowledgments and transactions  |
| Connectivity        | Works well with unreliable networks                      | Reliable but requires constant connection       |
| Use Case            | Ideal for IoT, sensors, and real-time telemetry          | Enterprise messaging and financial transactions |
 
Summary
- MQTT is best for IoT due to low power consumption, lightweight protocol, and QoS support.
- AMQP is more robust with advanced security and reliability, making it suitable for financial transactions.

Comparison of MQTT and HTTP/HTTPS

| Feature             | MQTT                                             | HTTP/HTTPS                                                              |
|---------------------|--------------------------------------------------|-------------------------------------------------------------------------|
| Power Usage         | Low – optimized for IoT and embedded devices     | High – requires more power due to request-response model                |
| Security            | Supports TLS and authentication, but lightweight | Secure with TLS, HTTPS widely used for encrypted communication          |
| Message Persistence | Supports QoS levels ensuring message delivery    | No built-in message persistence, relies on server-side handling         |
| Connectivity        | Works well with unreliable networks              | Requires stable connection, not optimized for intermittent connectivity |
| Use Case            | Ideal for IoT, sensors, and real-time telemetry  | Best for web services, APIs, and file transfers                         |

Summary
- MQTT is best suited for IoT applications due to its lightweight nature, low power usage, and ability to work over unreliable networks.
- HTTP/HTTPS is better suited for web applications and API communication but is not ideal for IoT due to its higher power consumption and request-response model.

